{{#extend "_layout"}}
    {{#content "body"}}
        <x-clamp>
            <section>
                <h1 class="display1">Bootstrip</h1>

                <h2>Content</h2>
                <ul>
                    <li>
                        <a href="dashboard.html">Dashboard</a> : An admin dashboard example.
                    </li>
                    <li>
                        <a href="kitchensink.html">Kitchen sink</a> : Everything on a single page
                    </li>
                    <li>
                        <a href="typography.html">Typography</a> : Headers, body content, links etc
                    </li>
                    <li>
                        <a href="fixedWidthHeader.html">Fixed width header</a> : A simple top-of-page header
                    </li>
                </ul>
            </section>
            <section>


                <h2>Concept</h2>
                <p>
                    Bootstrip is a stripped down version of Bootstrap 5, with some extra components thrown in. Bootstrip places strong emphasis on
                    minimal code and readability, and is written for programmers instead of frontenders. Names are short, and markup and CSS are minimal. 
                    In many cases deliberate design compromises were made to achieve this.
                </p>
                <p>
                    Bootstrip is also implemented as custom HTML elements, so one writes

<code>&lt;x-columns2&gt;
    ...
&lt;/x-columns2&gt;</code>

                    instead of

<code>&lt;div class=&quot;columns2&quot;&gt;
    ...
&lt;/div&gt;</code>
<xmp></xmp>


                    The main reason for this is readability. Reading and understanding markup is more tedious when you have
                    to read to a class declaration <x-codeInline>class="..."</x-codeInline> to understand what the unit of markup is doing. Also, the typical end tag of an element
                    <x-codeInline>&lt;/div&gt;</x-codeInline> says nothing about the element it closes, and to work around this code often gets cluttered with HTML 
                    comments to make element boundaries easier to identify, f.ex

<code>&lt;!-- 2 columns start --&gt;
&lt;div class=&quot;columns2&quot;&gt; 
    ... 
&lt;/div&gt;
&lt;!-- 2 columns ends --&gt;</code>
                    
                    There is of course a strong cultural
                    movement in web development that aims to keep HTML and CSS clearly separated as data/styling, but in my opinion, this concept is largely moot in practice
                    as CSS includes functionality/data aspects anyway. I would equate clear separation of data and style as akin
                    to the model-view-controller (MVC) design pattern - it worked well for the time it was invented, and in principal it is still a fine idea, but 
                    modern applications are too complex to easily scale with MVC, which has been superceded by f.ex MVVC or React's Redux system.
                </p>

                <p>
                    The <a href="https://github.com/shukriadams/bootstrip">source code</a> for Bootstrip can be found on Github.
                </p>
            </section>

        </x-clamp>
    {{/content}}
{{/extend}}
